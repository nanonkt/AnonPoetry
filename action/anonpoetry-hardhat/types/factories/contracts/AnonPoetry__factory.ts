/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  AnonPoetry,
  AnonPoetryInterface,
} from "../../contracts/AnonPoetry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "poemId",
        type: "uint256",
      },
    ],
    name: "PoemLiked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "poemId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "PoemPublished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "poemId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "ReadGranted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poemId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getBodyChunk",
    outputs: [
      {
        internalType: "euint128",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poemId",
        type: "uint256",
      },
    ],
    name: "getBodyChunkCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poemId",
        type: "uint256",
      },
    ],
    name: "getLikes",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poemId",
        type: "uint256",
      },
    ],
    name: "getPoemMeta",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poemId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getTitleChunk",
    outputs: [
      {
        internalType: "euint128",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poemId",
        type: "uint256",
      },
    ],
    name: "getTitleChunkCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poemId",
        type: "uint256",
      },
    ],
    name: "grantReadForCaller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poemId",
        type: "uint256",
      },
      {
        internalType: "externalEuint32",
        name: "encOne",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "like",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "externalEuint128[]",
        name: "titleEnc",
        type: "bytes32[]",
      },
      {
        internalType: "bytes",
        name: "titleProof",
        type: "bytes",
      },
      {
        internalType: "externalEuint128[]",
        name: "bodyEnc",
        type: "bytes32[]",
      },
      {
        internalType: "bytes",
        name: "bodyProof",
        type: "bytes",
      },
    ],
    name: "publishPoem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalPoems",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061018c6100b060408051608081018252600080825260208201819052918101829052606081019190915250604080516080810182527350157cffd6bbfa2dece204a89ec419c23ef5755d815273cd3ab3bd6bcc0c0bf3e27912a92043e817b1cf69602082015273a02cda4ca3a71d7c46997716f4283aa851c2881291810191909152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac606082015290565b80517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970080546001600160a01b03199081166001600160a01b039384161790915560208301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497018054831691841691909117905560408301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497028054831691841691909117905560608301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497038054909216921691909117905550565b610f828061019b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806377bf3b7d1161007157806377bf3b7d14610137578063a209081e1461014a578063d29174681461015d578063da1f12ab14610170578063e3d9fd4f14610178578063ebb67a401461018b57600080fd5b806303ae9446146100ae5780630c19e9a3146100c35780632dc166ed146100d65780632ddd7fb3146100fc5780633faa03b114610124575b600080fd5b6100c16100bc366004610c48565b610194565b005b6100c16100d1366004610c9b565b61026d565b6100e96100e4366004610cb4565b610350565b6040519081526020015b60405180910390f35b61010f61010a366004610c9b565b6103f5565b604080519283526020830191909152016100f3565b6100e9610132366004610cb4565b610438565b6100e9610145366004610c9b565b6104c4565b6100e9610158366004610c9b565b6104fd565b6100c161016b366004610d1b565b610536565b6127116100e9565b6100e9610186366004610c9b565b6107e2565b6100e960015481565b60015484106101be5760405162461bcd60e51b81526004016101b590610df2565b60405180910390fd5b6000848152602081815260408083208151601f8601849004840281018401909252848252929161020a918791879087908190840183828082843760009201919091525061081892505050565b905061021a82600201548261082d565b6002830181905561022a9061085f565b5061023982600201543361086f565b5060405186907f6a0752b72d9a339d235da58f1023f3e0a2b724ad2cd6d309984a790fa5def87f90600090a2505050505050565b600154811061028e5760405162461bcd60e51b81526004016101b590610df2565b6000818152602081905260408120805490915b818110156102db576102d28360000182815481106102c1576102c1610e18565b90600052602060002001543361086f565b506001016102a1565b50600182015460005b8181101561030d576103048460010182815481106102c1576102c1610e18565b506001016102e4565b5061031c83600201543361086f565b50604051339085907f0e4100c61114f95aee5d09c95372c18ddfd02312d7538416565c112cb1eb62e990600090a350505050565b600060015483106103735760405162461bcd60e51b81526004016101b590610df2565b60008381526020819052604090206001015482106103bf5760405162461bcd60e51b81526020600482015260096024820152680c4c2c840d2dcc8caf60bb1b60448201526064016101b5565b60008381526020819052604090206001018054839081106103e2576103e2610e18565b9060005260206000200154905092915050565b60008060015483106104195760405162461bcd60e51b81526004016101b590610df2565b5050600090815260208190526040902060048101546003909101549091565b6000600154831061045b5760405162461bcd60e51b81526004016101b590610df2565b60008381526020819052604090205482106104a45760405162461bcd60e51b81526020600482015260096024820152680c4c2c840d2dcc8caf60bb1b60448201526064016101b5565b60008381526020819052604090208054839081106103e2576103e2610e18565b600060015482106104e75760405162461bcd60e51b81526004016101b590610df2565b5060009081526020819052604090206001015490565b600060015482106105205760405162461bcd60e51b81526004016101b590610df2565b5060009081526020819052604090206002015490565b600154600081815260208190526040902042600382015560048101829055888067ffffffffffffffff81111561056e5761056e610e2e565b604051908082528060200260200182016040528015610597578160200160208202803683370190505b5080516105ab918491602090910190610ba8565b5060005b818110156106535760006106118d8d848181106105ce576105ce610e18565b905060200201358c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061088292505050565b90508084600001838154811061062957610629610e18565b60009182526020909120015561063e8161085f565b50610649813361086f565b50506001016105af565b50858067ffffffffffffffff81111561066e5761066e610e2e565b604051908082528060200260200182016040528015610697578160200160208202803683370190505b5080516106ae916001860191602090910190610ba8565b5060005b818110156107565760006107148a8a848181106106d1576106d1610e18565b9050602002013589898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061088292505050565b90508085600101838154811061072c5761072c610e18565b6000918252602090912001556107418161085f565b5061074c813361086f565b50506001016106b2565b506107616000610890565b600284018190556107719061085f565b5061078083600201543361086f565b506001805490600061079183610e44565b9190505550837f628585d8fa78eb83af1349962afcb1e778e63d4b899e7459302b51a6cf7ffa3a84600301546040516107cc91815260200190565b60405180910390a2505050505050505050505050565b600060015482106108055760405162461bcd60e51b81526004016101b590610df2565b5060009081526020819052604090205490565b6000610826838360046108a9565b9392505050565b6000826108415761083e6000610890565b92505b81610853576108506000610890565b91505b610826838360006109c0565b600061086b8230610a7c565b5090565b600061087b8383610a7c565b5090919050565b6000610826838360066108a9565b60006108a38263ffffffff166004610af9565b92915050565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497015460405163196d0b9b60e01b8152600091600080516020610f2d833981519152916001600160a01b039091169063196d0b9b90610911908890339089908990600401610e8d565b6020604051808303816000875af1158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190610eff565b8154604051630f8e573b60e21b8152600481018390523360248201529193506001600160a01b031690633e395cec90604401600060405180830381600087803b1580156109a057600080fd5b505af11580156109b4573d6000803e3d6000fd5b50505050509392505050565b60008082156109d45750600160f81b6109d8565b5060005b6000600080516020610f2d833981519152600181015460405163022f65e760e31b815260048101899052602481018890526001600160f81b0319851660448201529192506001600160a01b03169063117b2f38906064016020604051808303816000875af1158015610a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a729190610eff565b9695505050505050565b6000600080516020610f2d8339815191528054604051635ca4b5b160e11b8152600481018690526001600160a01b03858116602483015292935091169063b9496b6290604401600060405180830381600087803b158015610adc57600080fd5b505af1158015610af0573d6000803e3d6000fd5b50505050505050565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970154604051639cd07acb60e01b8152600091600080516020610f2d833981519152916001600160a01b0390911690639cd07acb90610b5d9087908790600401610f18565b6020604051808303816000875af1158015610b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba09190610eff565b949350505050565b828054828255906000526020600020908101928215610be3579160200282015b82811115610be3578251825591602001919060010190610bc8565b5061086b9291505b8082111561086b5760008155600101610beb565b60008083601f840112610c1157600080fd5b50813567ffffffffffffffff811115610c2957600080fd5b602083019150836020828501011115610c4157600080fd5b9250929050565b60008060008060608587031215610c5e57600080fd5b8435935060208501359250604085013567ffffffffffffffff811115610c8357600080fd5b610c8f87828801610bff565b95989497509550505050565b600060208284031215610cad57600080fd5b5035919050565b60008060408385031215610cc757600080fd5b50508035926020909101359150565b60008083601f840112610ce857600080fd5b50813567ffffffffffffffff811115610d0057600080fd5b6020830191508360208260051b8501011115610c4157600080fd5b6000806000806000806000806080898b031215610d3757600080fd5b883567ffffffffffffffff811115610d4e57600080fd5b610d5a8b828c01610cd6565b909950975050602089013567ffffffffffffffff811115610d7a57600080fd5b610d868b828c01610bff565b909750955050604089013567ffffffffffffffff811115610da657600080fd5b610db28b828c01610cd6565b909550935050606089013567ffffffffffffffff811115610dd257600080fd5b610dde8b828c01610bff565b999c989b5096995094979396929594505050565b6020808252600c908201526b496e76616c696420706f656d60a01b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060018201610e6457634e487b7160e01b600052601160045260246000fd5b5060010190565b60548110610e8957634e487b7160e01b600052602160045260246000fd5b9052565b84815260018060a01b0384166020820152608060408201526000835180608084015260005b81811015610ecf57602081870181015160a0868401015201610eb2565b50600060a0828501015260a0601f19601f830116840101915050610ef66060830184610e6b565b95945050505050565b600060208284031215610f1157600080fd5b5051919050565b828152604081016108266020830184610e6b56fe9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700a2646970667358221220754e808bfcce48f8a704f70d7171658c9c36fcb40cb7e2522cd3102c7edec35864736f6c634300081b0033";

type AnonPoetryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnonPoetryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnonPoetry__factory extends ContractFactory {
  constructor(...args: AnonPoetryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AnonPoetry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AnonPoetry__factory {
    return super.connect(runner) as AnonPoetry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnonPoetryInterface {
    return new Interface(_abi) as AnonPoetryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): AnonPoetry {
    return new Contract(address, _abi, runner) as unknown as AnonPoetry;
  }
}
