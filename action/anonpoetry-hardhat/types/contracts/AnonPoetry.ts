/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AnonPoetryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBodyChunk"
      | "getBodyChunkCount"
      | "getLikes"
      | "getPoemMeta"
      | "getTitleChunk"
      | "getTitleChunkCount"
      | "grantReadForCaller"
      | "like"
      | "protocolId"
      | "publishPoem"
      | "totalPoems"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PoemLiked" | "PoemPublished" | "ReadGranted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getBodyChunk",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBodyChunkCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLikes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoemMeta",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTitleChunk",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTitleChunkCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantReadForCaller",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "like",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publishPoem",
    values: [BytesLike[], BytesLike, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPoems",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getBodyChunk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBodyChunkCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLikes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoemMeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTitleChunk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTitleChunkCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantReadForCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "like", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishPoem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPoems", data: BytesLike): Result;
}

export namespace PoemLikedEvent {
  export type InputTuple = [poemId: BigNumberish];
  export type OutputTuple = [poemId: bigint];
  export interface OutputObject {
    poemId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoemPublishedEvent {
  export type InputTuple = [poemId: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [poemId: bigint, timestamp: bigint];
  export interface OutputObject {
    poemId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReadGrantedEvent {
  export type InputTuple = [poemId: BigNumberish, user: AddressLike];
  export type OutputTuple = [poemId: bigint, user: string];
  export interface OutputObject {
    poemId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AnonPoetry extends BaseContract {
  connect(runner?: ContractRunner | null): AnonPoetry;
  waitForDeployment(): Promise<this>;

  interface: AnonPoetryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBodyChunk: TypedContractMethod<
    [poemId: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;

  getBodyChunkCount: TypedContractMethod<
    [poemId: BigNumberish],
    [bigint],
    "view"
  >;

  getLikes: TypedContractMethod<[poemId: BigNumberish], [string], "view">;

  getPoemMeta: TypedContractMethod<
    [poemId: BigNumberish],
    [[bigint, bigint] & { id: bigint; timestamp: bigint }],
    "view"
  >;

  getTitleChunk: TypedContractMethod<
    [poemId: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;

  getTitleChunkCount: TypedContractMethod<
    [poemId: BigNumberish],
    [bigint],
    "view"
  >;

  grantReadForCaller: TypedContractMethod<
    [poemId: BigNumberish],
    [void],
    "nonpayable"
  >;

  like: TypedContractMethod<
    [poemId: BigNumberish, encOne: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  publishPoem: TypedContractMethod<
    [
      titleEnc: BytesLike[],
      titleProof: BytesLike,
      bodyEnc: BytesLike[],
      bodyProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  totalPoems: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBodyChunk"
  ): TypedContractMethod<
    [poemId: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBodyChunkCount"
  ): TypedContractMethod<[poemId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLikes"
  ): TypedContractMethod<[poemId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPoemMeta"
  ): TypedContractMethod<
    [poemId: BigNumberish],
    [[bigint, bigint] & { id: bigint; timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTitleChunk"
  ): TypedContractMethod<
    [poemId: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTitleChunkCount"
  ): TypedContractMethod<[poemId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantReadForCaller"
  ): TypedContractMethod<[poemId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "like"
  ): TypedContractMethod<
    [poemId: BigNumberish, encOne: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "publishPoem"
  ): TypedContractMethod<
    [
      titleEnc: BytesLike[],
      titleProof: BytesLike,
      bodyEnc: BytesLike[],
      bodyProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalPoems"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "PoemLiked"
  ): TypedContractEvent<
    PoemLikedEvent.InputTuple,
    PoemLikedEvent.OutputTuple,
    PoemLikedEvent.OutputObject
  >;
  getEvent(
    key: "PoemPublished"
  ): TypedContractEvent<
    PoemPublishedEvent.InputTuple,
    PoemPublishedEvent.OutputTuple,
    PoemPublishedEvent.OutputObject
  >;
  getEvent(
    key: "ReadGranted"
  ): TypedContractEvent<
    ReadGrantedEvent.InputTuple,
    ReadGrantedEvent.OutputTuple,
    ReadGrantedEvent.OutputObject
  >;

  filters: {
    "PoemLiked(uint256)": TypedContractEvent<
      PoemLikedEvent.InputTuple,
      PoemLikedEvent.OutputTuple,
      PoemLikedEvent.OutputObject
    >;
    PoemLiked: TypedContractEvent<
      PoemLikedEvent.InputTuple,
      PoemLikedEvent.OutputTuple,
      PoemLikedEvent.OutputObject
    >;

    "PoemPublished(uint256,uint256)": TypedContractEvent<
      PoemPublishedEvent.InputTuple,
      PoemPublishedEvent.OutputTuple,
      PoemPublishedEvent.OutputObject
    >;
    PoemPublished: TypedContractEvent<
      PoemPublishedEvent.InputTuple,
      PoemPublishedEvent.OutputTuple,
      PoemPublishedEvent.OutputObject
    >;

    "ReadGranted(uint256,address)": TypedContractEvent<
      ReadGrantedEvent.InputTuple,
      ReadGrantedEvent.OutputTuple,
      ReadGrantedEvent.OutputObject
    >;
    ReadGranted: TypedContractEvent<
      ReadGrantedEvent.InputTuple,
      ReadGrantedEvent.OutputTuple,
      ReadGrantedEvent.OutputObject
    >;
  };
}
